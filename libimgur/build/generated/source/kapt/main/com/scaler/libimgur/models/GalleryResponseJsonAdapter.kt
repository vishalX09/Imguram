// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.scaler.libimgur.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class GalleryResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<GalleryResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("data", "status", "success")

  private val listOfImageAdapter: JsonAdapter<List<Image>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Image::class.java), emptySet(),
      "data")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "status")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "success")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("GalleryResponse").append(')') }

  public override fun fromJson(reader: JsonReader): GalleryResponse {
    var data_: List<Image>? = null
    var status: Int? = null
    var success: Boolean? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> data_ = listOfImageAdapter.fromJson(reader) ?: throw Util.unexpectedNull("data_",
            "data", reader)
        1 -> status = nullableIntAdapter.fromJson(reader)
        2 -> success = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("success",
            "success", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return GalleryResponse(
        `data` = data_ ?: throw Util.missingProperty("data_", "data", reader),
        status = status,
        success = success ?: throw Util.missingProperty("success", "success", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: GalleryResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("data")
    listOfImageAdapter.toJson(writer, value_.`data`)
    writer.name("status")
    nullableIntAdapter.toJson(writer, value_.status)
    writer.name("success")
    booleanAdapter.toJson(writer, value_.success)
    writer.endObject()
  }
}
