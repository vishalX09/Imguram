// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.scaler.libimgur.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class TagsResponse_DataJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<TagsResponse.Data>() {
  private val options: JsonReader.Options = JsonReader.Options.of("featured", "galleries", "tags")

  private val nullableAnyAdapter: JsonAdapter<Any?> = moshi.adapter(Any::class.java, emptySet(),
      "featured")

  private val listOfGalleryAdapter: JsonAdapter<List<Gallery>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Gallery::class.java), emptySet(),
      "galleries")

  private val listOfTagAdapter: JsonAdapter<List<Tag>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Tag::class.java), emptySet(),
      "tags")

  public override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("TagsResponse.Data").append(')') }

  public override fun fromJson(reader: JsonReader): TagsResponse.Data {
    var featured: Any? = null
    var galleries: List<Gallery>? = null
    var tags: List<Tag>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> featured = nullableAnyAdapter.fromJson(reader)
        1 -> galleries = listOfGalleryAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("galleries", "galleries", reader)
        2 -> tags = listOfTagAdapter.fromJson(reader) ?: throw Util.unexpectedNull("tags", "tags",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return TagsResponse.Data(
        featured = featured,
        galleries = galleries ?: throw Util.missingProperty("galleries", "galleries", reader),
        tags = tags ?: throw Util.missingProperty("tags", "tags", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: TagsResponse.Data?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("featured")
    nullableAnyAdapter.toJson(writer, value_.featured)
    writer.name("galleries")
    listOfGalleryAdapter.toJson(writer, value_.galleries)
    writer.name("tags")
    listOfTagAdapter.toJson(writer, value_.tags)
    writer.endObject()
  }
}
